#include "../cu_helper.h"

int main(int argc, char* argv[])
{
	checkCudaErrors(cuInit(0));
	int driverVersion = 0;
	checkCudaErrors(cuDriverGetVersion(&driverVersion));
	printf("DRIVER VERSION: %d\n\n", driverVersion);
	int num_devices;
	checkCudaErrors(cuDeviceGetCount(&num_devices));
	for (int i = 0; i < num_devices; ++i)
	{
		printf("DEVICE %d\n", i);

		char name[256];
		checkCudaErrors(cuDeviceGetName(name, sizeof(name), i));
		printf("DEVICE NAME: %s\n", name);
		size_t total_mem;
		checkCudaErrors(cuDeviceTotalMem(&total_mem, i));
		printf("TOTAL MEM: %lu B = %lu MB\n", total_mem, total_mem / 1048576);
		int compute_capability_major;
		checkCudaErrors(cuDeviceGetAttribute(&compute_capability_major, CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR, i));
		printf("CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR: %d\n", compute_capability_major);
		int compute_capability_minor;
		checkCudaErrors(cuDeviceGetAttribute(&compute_capability_minor, CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR, i));
		printf("CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR: %d\n", compute_capability_minor);
		int multiprocessor_count;
		checkCudaErrors(cuDeviceGetAttribute(&multiprocessor_count, CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT, i));
		printf("CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT: %d\n", multiprocessor_count);
		int max_shared_memory_per_block;
		checkCudaErrors(cuDeviceGetAttribute(&max_shared_memory_per_block, CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK, i));
		printf("CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK: %d B = %d KB\n", max_shared_memory_per_block, max_shared_memory_per_block / 1024);
		int total_constant_memory;
		checkCudaErrors(cuDeviceGetAttribute(&total_constant_memory, CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY, i));
		printf("CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY: %d B = %d KB\n", total_constant_memory, total_constant_memory / 1024);
		int max_registers_per_block;
		checkCudaErrors(cuDeviceGetAttribute(&max_registers_per_block, CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK, i));
		printf("CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK: %d\n", max_registers_per_block);
		int ecc_enabled;
		checkCudaErrors(cuDeviceGetAttribute(&ecc_enabled, CU_DEVICE_ATTRIBUTE_ECC_ENABLED, i));
		printf("CU_DEVICE_ATTRIBUTE_ECC_ENABLED: %d\n", ecc_enabled);
		int kernel_exec_timeout;
		checkCudaErrors(cuDeviceGetAttribute(&kernel_exec_timeout, CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT, i));
		printf("CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT: %d\n", kernel_exec_timeout);
		int clock_rate;
		checkCudaErrors(cuDeviceGetAttribute(&clock_rate, CU_DEVICE_ATTRIBUTE_CLOCK_RATE, i));
		printf("CU_DEVICE_ATTRIBUTE_CLOCK_RATE: %d KHz = %d MHz\n", clock_rate, clock_rate / 1000);
		int memory_clock_rate;
		checkCudaErrors(cuDeviceGetAttribute(&memory_clock_rate, CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE, i));
		printf("CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE: %d KHz = %d MHz\n", memory_clock_rate, memory_clock_rate / 1000);
		int global_memory_bus_width;
		checkCudaErrors(cuDeviceGetAttribute(&global_memory_bus_width, CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH, i));
		printf("CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH: %d bits\n", global_memory_bus_width);
		int l2_cache_size;
		checkCudaErrors(cuDeviceGetAttribute(&l2_cache_size, CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE, i));
		printf("CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE: %d B = %d KB\n", l2_cache_size, l2_cache_size / 1024);
		int warp_size;
		checkCudaErrors(cuDeviceGetAttribute(&warp_size, CU_DEVICE_ATTRIBUTE_WARP_SIZE, i));
		printf("CU_DEVICE_ATTRIBUTE_WARP_SIZE: %d\n", warp_size);
		int max_threads_per_multiprocessor;
		checkCudaErrors(cuDeviceGetAttribute(&max_threads_per_multiprocessor, CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR, i));
		printf("CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR: %d\n", max_threads_per_multiprocessor);
		int max_threads_per_block;
		checkCudaErrors(cuDeviceGetAttribute(&max_threads_per_block, CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK, i));
		printf("CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK: %d\n", max_threads_per_block);
		int max_block_dim_x;
		checkCudaErrors(cuDeviceGetAttribute(&max_block_dim_x, CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X, i));
		printf("CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X: %d\n", max_block_dim_x);
		int max_block_dim_y;
		checkCudaErrors(cuDeviceGetAttribute(&max_block_dim_y, CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y, i));
		printf("CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y: %d\n", max_block_dim_y);
		int max_block_dim_z;
		checkCudaErrors(cuDeviceGetAttribute(&max_block_dim_z, CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z, i));
		printf("CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z: %d\n", max_block_dim_z);
		int max_grid_dim_x;
		checkCudaErrors(cuDeviceGetAttribute(&max_grid_dim_x, CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X, i));
		printf("CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X: %d\n", max_grid_dim_x);
		int max_grid_dim_y;
		checkCudaErrors(cuDeviceGetAttribute(&max_grid_dim_y, CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y, i));
		printf("CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y: %d\n", max_grid_dim_y);
		int max_grid_dim_z;
		checkCudaErrors(cuDeviceGetAttribute(&max_grid_dim_z, CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z, i));
		printf("CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z: %d\n", max_grid_dim_z);
		int gpu_overlap;
		checkCudaErrors(cuDeviceGetAttribute(&gpu_overlap, CU_DEVICE_ATTRIBUTE_GPU_OVERLAP, i));
		printf("CU_DEVICE_ATTRIBUTE_GPU_OVERLAP: %d\n", gpu_overlap);
		int async_engine_count;
		checkCudaErrors(cuDeviceGetAttribute(&async_engine_count, CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT, i));
		printf("CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT: %d\n", async_engine_count);
		int integrated;
		checkCudaErrors(cuDeviceGetAttribute(&integrated, CU_DEVICE_ATTRIBUTE_INTEGRATED, i));
		printf("CU_DEVICE_ATTRIBUTE_INTEGRATED: %d\n", integrated);
		int can_map_host_memory;
		checkCudaErrors(cuDeviceGetAttribute(&can_map_host_memory, CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY, i));
		printf("CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY: %d\n", can_map_host_memory);
		int concurrent_kernels;
		checkCudaErrors(cuDeviceGetAttribute(&concurrent_kernels, CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS, i));
		printf("CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS: %d\n", concurrent_kernels);
		int tcc_driver;
		checkCudaErrors(cuDeviceGetAttribute(&tcc_driver, CU_DEVICE_ATTRIBUTE_TCC_DRIVER, i));
		printf("CU_DEVICE_ATTRIBUTE_TCC_DRIVER: %d\n", tcc_driver);
		int unified_addressing;
		checkCudaErrors(cuDeviceGetAttribute(&unified_addressing, CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING, i));
		printf("CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING: %d\n", unified_addressing);
		int pci_bus_id;
		checkCudaErrors(cuDeviceGetAttribute(&pci_bus_id, CU_DEVICE_ATTRIBUTE_PCI_BUS_ID, i));
		printf("CU_DEVICE_ATTRIBUTE_PCI_BUS_ID: %d\n", pci_bus_id);
		int pci_device_id;
		checkCudaErrors(cuDeviceGetAttribute(&pci_device_id, CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID, i));
		printf("CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID: %d\n", pci_device_id);
		int compute_mode;
		checkCudaErrors(cuDeviceGetAttribute(&compute_mode, CU_DEVICE_ATTRIBUTE_COMPUTE_MODE, i));
		printf("CU_DEVICE_ATTRIBUTE_COMPUTE_MODE: %d\n", compute_mode);
		if (compute_mode == CU_COMPUTEMODE_DEFAULT) printf("CU_DEVICE_ATTRIBUTE_COMPUTE_MODE: %s\n", "Default (multiple host threads can use ::cudaSetDevice() with device simultaneously)");
		if (compute_mode == CU_COMPUTEMODE_EXCLUSIVE) printf("CU_DEVICE_ATTRIBUTE_COMPUTE_MODE: %s\n", "Exclusive (only one host thread in one process is able to use ::cudaSetDevice() with this device)");
		if (compute_mode == CU_COMPUTEMODE_PROHIBITED) printf("CU_DEVICE_ATTRIBUTE_COMPUTE_MODE: %s\n", "Prohibited (no host thread can use ::cudaSetDevice() with this device)");
		if (compute_mode == CU_COMPUTEMODE_EXCLUSIVE_PROCESS) printf("CU_DEVICE_ATTRIBUTE_COMPUTE_MODE: %s\n", "Exclusive Process (many threads in one process is able to use ::cudaSetDevice() with this device)");
		printf("\n");
	}
}
